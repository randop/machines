-- # dnsdist meta:v2.0.0
setLocal("0.0.0.0:53")

newServer({address="127.0.0.1:5301", pool="default"})
newServer({address="127.0.0.1:5300", pool="kubernetes"})

-- reusable actions
blk = SpoofAction("0.0.0.0")
kube = PoolAction("kubernetes")

-- # exact-match domain
-- addAction(makeRule("microsoft.com"), SpoofAction())
-- # any sub-domain
-- addAction("*.microsoft.com", SpoofAction())

-- #=================================================================
-- Filter Rules: BLOCK
-- #=================================================================
addAction(makeRule("microsoft.com"), blk)
addAction("*.microsoft.com", blk)
addAction(makeRule("apple.com"), blk)
addAction("*.apple.com", blk)
addAction(makeRule("google.com"), blk)
addAction("*.google.com", blk)
addAction(makeRule("facebook.com"), blk)
addAction("*.facebook.com", blk)
addAction(makeRule("youtube.com"), blk)
addAction("*.youtube.com", blk)

-- #=================================================================
-- Filter Rules: ALLOW
-- #================================================================
addAction(makeRule("tindango"), kube)
addAction("*.tindango", kube)
addAction(makeRule("localdomain"), kube)
addAction("*.localdomain", kube)

addAction(AllRule(), PoolAction("default"))
addAction({NXDomainCode}, SpoofAction("0.0.0.0"))

-- high-performance cache
local pc = newPacketCache(                 -- parameters tuned for heavy load
  1000000,                 -- max cached entries
  {
    maxTTL = 86400,        -- cap cached TTL at 1 day (equal to actual record TTL)
    minTTL = 0,            -- allow very short records
    temporaryFailureTTL = 60,   -- SERVFAIL / timeouts
    staleTTL = 60,              -- use stale data while upstream still down
    dontAge = false,            -- age entries normally
    maxNegativeTTL = 3600       -- cap NODATA / NXDOMAIN TTL
  })

-- attach cache with default downstream dns
getPool("default"):setCache(pc)
